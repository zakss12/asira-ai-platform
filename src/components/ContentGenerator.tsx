import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { FileText, Hash, DollarSign, Loader, Copy, Check, Sparkles, Target, Users, AlertCircle, Wifi, WifiOff, Image, Video, MessageCircle } from 'lucide-react';

interface ContentData {
  script: string;
  titles: string[];
  hashtags: string[];
  description: string;
  metadata: {
    topic: string;
    niche: string;
    contentType: string;
    targetAudience: string;
    tone: string;
    generatedAt: string;
  };
  autoGenerated?: {
    thumbnailIdea: string;
    youtubeCaptions: string;
    tiktokBio: string;
    instagramHashtags: string[];
  };
}

const ContentGenerator: React.FC = () => {
  const [topic, setTopic] = useState('');
  const [niche, setNiche] = useState('');
  const [contentType, setContentType] = useState('youtube');
  const [targetAudience, setTargetAudience] = useState('general');
  const [tone, setTone] = useState('engaging');
  const [content, setContent] = useState<ContentData | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [copiedItem, setCopiedItem] = useState<string | null>(null);
  const [serverStatus, setServerStatus] = useState<'checking' | 'online' | 'offline'>('checking');

  // Check server status on component mount
  React.useEffect(() => {
    checkServerStatus();
  }, []);

  const checkServerStatus = async () => {
    try {
      console.log('🔍 Checking server status...');
      const response = await fetch('http://localhost:3001/api/health');
      const data = await response.json();
      
      if (data.status === 'OK') {
        setServerStatus('online');
        console.log('✅ Server is online');
      } else {
        setServerStatus('offline');
        console.log('❌ Server responded but not healthy');
      }
    } catch (error) {
      setServerStatus('offline');
      console.error('❌ Server is offline:', error);
    }
  };

  const contentTypes = [
    { id: 'youtube', name: 'YouTube Video', icon: '📺' },
    { id: 'tiktok', name: 'TikTok Video', icon: '🎵' },
    { id: 'instagram', name: 'Instagram Post', icon: '📸' },
    { id: 'blog', name: 'Blog Article', icon: '📝' }
  ];

  const audiences = [
    { id: 'general', name: 'General Audience' },
    { id: 'teens', name: 'Teenagers (13-19)' },
    { id: 'young-adults', name: 'Young Adults (20-35)' },
    { id: 'professionals', name: 'Working Professionals' },
    { id: 'parents', name: 'Parents & Families' },
    { id: 'entrepreneurs', name: 'Entrepreneurs' }
  ];

  const tones = [
    { id: 'engaging', name: 'Engaging & Friendly' },
    { id: 'professional', name: 'Professional' },
    { id: 'casual', name: 'Casual & Conversational' },
    { id: 'authoritative', name: 'Authoritative' },
    { id: 'humorous', name: 'Humorous' },
    { id: 'inspirational', name: 'Inspirational' }
  ];

  const generateAutoContent = (baseContent: ContentData) => {
    const autoGenerated = {
      thumbnailIdea: `Bold text overlay: "${baseContent.titles[0]}" with bright ${contentType === 'youtube' ? 'red and white' : 'colorful'} background and ${baseContent.metadata.tone} expression`,
      youtubeCaptions: `${baseContent.description}\n\n🔔 Subscribe for more ${baseContent.metadata.niche} content!\n💬 What's your experience with ${baseContent.metadata.topic}?\n\n${baseContent.hashtags.slice(0, 5).join(' ')}`,
      tiktokBio: `${baseContent.script.substring(0, 100)}... 🔥\n\nFollow for daily ${baseContent.metadata.niche} tips! ✨\n\n${baseContent.hashtags.slice(0, 3).join(' ')}`,
      instagramHashtags: [
        ...baseContent.hashtags.slice(0, 10),
        '#content', '#creator', '#viral', '#trending', '#explore'
      ]
    };

    return {
      ...baseContent,
      autoGenerated
    };
  };

  const handleGenerate = async () => {
    if (!topic.trim() || !niche.trim()) {
      setError('Please enter both topic and niche');
      return;
    }

    if (serverStatus === 'offline') {
      setError('Server is offline. Please make sure the backend is running on port 3001.');
      return;
    }
    
    setLoading(true);
    setError(null);
    
    try {
      console.log('🚀 Starting content generation...');
      console.log('📦 Request data:', { topic: topic.trim(), niche: niche.trim(), contentType, targetAudience, tone });
      
      const response = await fetch('http://localhost:3001/api/content/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          topic: topic.trim(), 
          niche: niche.trim(),
          contentType,
          targetAudience,
          tone
        }),
      });
      
      console.log('📡 Response status:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('❌ Server error response:', errorText);
        throw new Error(`Server error: ${response.status} - ${errorText}`);
      }
      
      const data = await response.json();
      console.log('📦 Response data:', data);
      
      if (data.success) {
        const enhancedContent = generateAutoContent(data.data);
        setContent(enhancedContent);
        console.log('✅ Content generated successfully!');
        if (data.fallback) {
          setError('Content generated using fallback system (Gemini may be temporarily unavailable)');
        }
      } else {
        throw new Error(data.message || 'Failed to generate content');
      }
    } catch (error) {
      console.error('❌ Error generating content:', error);
      
      if (error instanceof TypeError && error.message.includes('fetch')) {
        setError('Cannot connect to server. Please make sure the backend is running on http://localhost:3001');
      } else {
        setError(error instanceof Error ? error.message : 'Failed to generate content. Please try again.');
      }
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = async (text: string, item: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedItem(item);
      setTimeout(() => setCopiedItem(null), 2000);
    } catch (error) {
      console.error('Failed to copy:', error);
    }
  };

  const exportContent = () => {
    if (!content) return;

    const exportData = {
      ...content,
      exportedAt: new Date().toISOString()
    };

    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `content-${content.metadata.niche.replace(/\s+/g, '-').toLowerCase()}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <section className="min-h-screen pt-24 pb-16">
      <div className="container mx-auto px-6">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="text-center mb-12"
        >
          <h2 className="text-4xl md:text-5xl font-bold text-white mb-4">
            AI-Powered <span className="text-purple-400">Content Generator</span>
          </h2>
          <p className="text-xl text-white/70 max-w-3xl mx-auto">
            Generate high-quality, SEO-optimized content using Google Gemini AI. Create scripts, titles, 
            descriptions, and hashtags tailored to your audience and platform.
          </p>
          
          {/* Server Status Indicator */}
          <div className="flex items-center justify-center mt-4">
            {serverStatus === 'checking' && (
              <div className="flex items-center space-x-2 text-yellow-400">
                <Loader className="w-4 h-4 animate-spin" />
                <span className="text-sm">Checking server status...</span>
              </div>
            )}
            {serverStatus === 'online' && (
              <div className="flex items-center space-x-2 text-green-400">
                <Wifi className="w-4 h-4" />
                <span className="text-sm">Server online • Gemini AI ready</span>
              </div>
            )}
            {serverStatus === 'offline' && (
              <div className="flex items-center space-x-2 text-red-400">
                <WifiOff className="w-4 h-4" />
                <span className="text-sm">Server offline • Please start the backend</span>
              </div>
            )}
          </div>
        </motion.div>

        {/* Input Section */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
          className="max-w-4xl mx-auto mb-12"
        >
          <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10">
            {error && (
              <div className="mb-6 p-4 bg-red-500/10 border border-red-500/20 rounded-xl flex items-center space-x-3">
                <AlertCircle className="w-5 h-5 text-red-400" />
                <span className="text-red-300">{error}</span>
              </div>
            )}

            <div className="grid md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-white/80 text-sm font-medium mb-2">
                    Topic Category
                  </label>
                  <input
                    type="text"
                    value={topic}
                    onChange={(e) => setTopic(e.target.value)}
                    placeholder="e.g., tech, fitness, cooking, finance"
                    className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:border-purple-500 transition-all duration-300"
                  />
                </div>
                
                <div>
                  <label className="block text-white/80 text-sm font-medium mb-2">
                    Specific Niche
                  </label>
                  <input
                    type="text"
                    value={niche}
                    onChange={(e) => setNiche(e.target.value)}
                    placeholder="e.g., AI Productivity Tools, Home Workouts"
                    className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:border-purple-500 transition-all duration-300"
                  />
                </div>

                <div>
                  <label className="block text-white/80 text-sm font-medium mb-2">
                    Content Type
                  </label>
                  <div className="grid grid-cols-2 gap-2">
                    {contentTypes.map((type) => (
                      <button
                        key={type.id}
                        onClick={() => setContentType(type.id)}
                        className={`p-3 rounded-xl border transition-all duration-300 text-left ${
                          contentType === type.id
                            ? 'border-purple-500 bg-purple-500/20 text-purple-300'
                            : 'border-white/20 bg-white/5 hover:bg-white/10 text-white/80'
                        }`}
                      >
                        <div className="flex items-center space-x-2">
                          <span className="text-lg">{type.icon}</span>
                          <span className="text-sm font-medium">{type.name}</span>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-white/80 text-sm font-medium mb-2">
                    <Users className="w-4 h-4 inline mr-1" />
                    Target Audience
                  </label>
                  <select
                    value={targetAudience}
                    onChange={(e) => setTargetAudience(e.target.value)}
                    className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:border-purple-500 transition-all duration-300"
                  >
                    {audiences.map((audience) => (
                      <option key={audience.id} value={audience.id} className="bg-gray-800">
                        {audience.name}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-white/80 text-sm font-medium mb-2">
                    <Target className="w-4 h-4 inline mr-1" />
                    Tone & Style
                  </label>
                  <select
                    value={tone}
                    onChange={(e) => setTone(e.target.value)}
                    className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:border-purple-500 transition-all duration-300"
                  >
                    {tones.map((toneOption) => (
                      <option key={toneOption.id} value={toneOption.id} className="bg-gray-800">
                        {toneOption.name}
                      </option>
                    ))}
                  </select>
                </div>

                <motion.button
                  onClick={handleGenerate}
                  disabled={loading || !topic.trim() || !niche.trim() || serverStatus === 'offline'}
                  className="w-full px-8 py-4 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-xl font-medium hover:shadow-lg hover:shadow-purple-500/25 transition-all duration-300 disabled:opacity-50"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  {loading ? (
                    <span className="flex items-center justify-center space-x-2">
                      <Loader className="w-5 h-5 animate-spin" />
                      <span>Generating Content...</span>
                    </span>
                  ) : (
                    <span className="flex items-center justify-center space-x-2">
                      <Sparkles className="w-5 h-5" />
                      <span>Generate Content</span>
                    </span>
                  )}
                </motion.button>
              </div>
            </div>
          </div>
        </motion.div>

        {/* Results Section */}
        {content && (
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            className="max-w-6xl mx-auto space-y-8"
          >
            {/* Export Button */}
            <div className="flex justify-end">
              <button
                onClick={exportContent}
                className="flex items-center space-x-2 px-6 py-3 bg-green-500 hover:bg-green-600 text-white rounded-lg transition-all duration-300"
              >
                <DollarSign className="w-4 h-4" />
                <span>Export Content</span>
              </button>
            </div>

            {/* Script */}
            <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-gradient-to-r from-red-500 to-pink-500 rounded-xl flex items-center justify-center">
                    <FileText className="w-5 h-5 text-white" />
                  </div>
                  <h3 className="text-2xl font-bold text-white">
                    {contentType.charAt(0).toUpperCase() + contentType.slice(1)} Script
                  </h3>
                </div>
                <button
                  onClick={() => copyToClipboard(content.script, 'script')}
                  className="flex items-center space-x-2 px-4 py-2 bg-white/10 hover:bg-white/20 rounded-lg transition-all duration-300"
                >
                  {copiedItem === 'script' ? <Check className="w-4 h-4 text-green-400" /> : <Copy className="w-4 h-4 text-white/70" />}
                  <span className="text-white/70">Copy</span>
                </button>
              </div>

              <div className="prose prose-invert max-w-none">
                <div className="text-white/90 leading-relaxed whitespace-pre-wrap">
                  {content.script}
                </div>
              </div>
            </div>

            <div className="grid md:grid-cols-2 gap-8">
              {/* Titles */}
              <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10">
                <div className="flex items-center justify-between mb-6">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-xl flex items-center justify-center">
                      <FileText className="w-5 h-5 text-white" />
                    </div>
                    <h3 className="text-xl font-bold text-white">SEO-Optimized Titles</h3>
                  </div>
                  <button
                    onClick={() => copyToClipboard(content.titles.join('\n'), 'titles')}
                    className="flex items-center space-x-2 px-3 py-1 bg-white/10 hover:bg-white/20 rounded-lg transition-all duration-300"
                  >
                    {copiedItem === 'titles' ? <Check className="w-4 h-4 text-green-400" /> : <Copy className="w-4 h-4 text-white/70" />}
                  </button>
                </div>

                <div className="space-y-3">
                  {content.titles.map((title, index) => (
                    <div key={index} className="p-3 bg-white/5 rounded-lg border border-white/10 hover:bg-white/10 transition-colors">
                      <p className="text-white/80">{title}</p>
                    </div>
                  ))}
                </div>
              </div>

              {/* Hashtags */}
              <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10">
                <div className="flex items-center justify-between mb-6">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-gradient-to-r from-green-500 to-teal-500 rounded-xl flex items-center justify-center">
                      <Hash className="w-5 h-5 text-white" />
                    </div>
                    <h3 className="text-xl font-bold text-white">Trending Hashtags</h3>
                  </div>
                  <button
                    onClick={() => copyToClipboard(content.hashtags.join(' '), 'hashtags')}
                    className="flex items-center space-x-2 px-3 py-1 bg-white/10 hover:bg-white/20 rounded-lg transition-all duration-300"
                  >
                    {copiedItem === 'hashtags' ? <Check className="w-4 h-4 text-green-400" /> : <Copy className="w-4 h-4 text-white/70" />}
                  </button>
                </div>

                <div className="flex flex-wrap gap-2">
                  {content.hashtags.map((hashtag, index) => (
                    <span key={index} className="px-3 py-1 bg-purple-500/20 text-purple-300 rounded-full text-sm hover:bg-purple-500/30 transition-colors cursor-pointer">
                      {hashtag}
                    </span>
                  ))}
                </div>
              </div>
            </div>

            {/* Description */}
            <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-xl flex items-center justify-center">
                    <FileText className="w-5 h-5 text-white" />
                  </div>
                  <h3 className="text-2xl font-bold text-white">Optimized Description</h3>
                </div>
                <button
                  onClick={() => copyToClipboard(content.description, 'description')}
                  className="flex items-center space-x-2 px-4 py-2 bg-white/10 hover:bg-white/20 rounded-lg transition-all duration-300"
                >
                  {copiedItem === 'description' ? <Check className="w-4 h-4 text-green-400" /> : <Copy className="w-4 h-4 text-white/70" />}
                  <span className="text-white/70">Copy</span>
                </button>
              </div>
              <div className="text-white/80 leading-relaxed whitespace-pre-wrap">
                {content.description}
              </div>
            </div>

            {/* Auto-Generated Content */}
            {content.autoGenerated && (
              <div className="bg-gradient-to-r from-purple-500/20 to-pink-500/20 backdrop-blur-sm rounded-2xl p-6 border border-purple-500/30">
                <h3 className="text-2xl font-bold text-white mb-6">🎨 One-Click Generated Content</h3>
                
                <div className="grid md:grid-cols-2 gap-6">
                  {/* Thumbnail Idea */}
                  <div className="bg-white/5 rounded-xl p-4 border border-white/10">
                    <div className="flex items-center space-x-2 mb-3">
                      <Image className="w-5 h-5 text-blue-400" />
                      <h4 className="text-white font-semibold">Thumbnail Idea</h4>
                      <button
                        onClick={() => copyToClipboard(content.autoGenerated!.thumbnailIdea, 'thumbnail')}
                        className="ml-auto p-1 hover:bg-white/10 rounded"
                      >
                        {copiedItem === 'thumbnail' ? <Check className="w-4 h-4 text-green-400" /> : <Copy className="w-4 h-4 text-white/70" />}
                      </button>
                    </div>
                    <p className="text-white/80 text-sm">{content.autoGenerated.thumbnailIdea}</p>
                  </div>

                  {/* YouTube Caption */}
                  <div className="bg-white/5 rounded-xl p-4 border border-white/10">
                    <div className="flex items-center space-x-2 mb-3">
                      <Video className="w-5 h-5 text-red-400" />
                      <h4 className="text-white font-semibold">YouTube Caption</h4>
                      <button
                        onClick={() => copyToClipboard(content.autoGenerated!.youtubeCaptions, 'youtube')}
                        className="ml-auto p-1 hover:bg-white/10 rounded"
                      >
                        {copiedItem === 'youtube' ? <Check className="w-4 h-4 text-green-400" /> : <Copy className="w-4 h-4 text-white/70" />}
                      </button>
                    </div>
                    <p className="text-white/80 text-sm whitespace-pre-wrap">{content.autoGenerated.youtubeCaptions}</p>
                  </div>

                  {/* TikTok Bio */}
                  <div className="bg-white/5 rounded-xl p-4 border border-white/10">
                    <div className="flex items-center space-x-2 mb-3">
                      <MessageCircle className="w-5 h-5 text-pink-400" />
                      <h4 className="text-white font-semibold">TikTok Bio Text</h4>
                      <button
                        onClick={() => copyToClipboard(content.autoGenerated!.tiktokBio, 'tiktok')}
                        className="ml-auto p-1 hover:bg-white/10 rounded"
                      >
                        {copiedItem === 'tiktok' ? <Check className="w-4 h-4 text-green-400" /> : <Copy className="w-4 h-4 text-white/70" />}
                      </button>
                    </div>
                    <p className="text-white/80 text-sm whitespace-pre-wrap">{content.autoGenerated.tiktokBio}</p>
                  </div>

                  {/* Instagram Hashtags */}
                  <div className="bg-white/5 rounded-xl p-4 border border-white/10">
                    <div className="flex items-center space-x-2 mb-3">
                      <Hash className="w-5 h-5 text-purple-400" />
                      <h4 className="text-white font-semibold">Instagram Hashtags</h4>
                      <button
                        onClick={() => copyToClipboard(content.autoGenerated!.instagramHashtags.join(' '), 'instagram')}
                        className="ml-auto p-1 hover:bg-white/10 rounded"
                      >
                        {copiedItem === 'instagram' ? <Check className="w-4 h-4 text-green-400" /> : <Copy className="w-4 h-4 text-white/70" />}
                      </button>
                    </div>
                    <div className="flex flex-wrap gap-1">
                      {content.autoGenerated.instagramHashtags.map((hashtag, index) => (
                        <span key={index} className="px-2 py-1 bg-purple-500/20 text-purple-300 rounded text-xs">
                          {hashtag}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Metadata */}
            <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10">
              <h3 className="text-xl font-bold text-white mb-4">Content Metadata</h3>
              <div className="grid md:grid-cols-3 gap-4">
                <div className="p-4 bg-white/5 rounded-lg">
                  <div className="text-white/60 text-sm">Target Audience</div>
                  <div className="text-white font-medium">{audiences.find(a => a.id === content.metadata.targetAudience)?.name}</div>
                </div>
                <div className="p-4 bg-white/5 rounded-lg">
                  <div className="text-white/60 text-sm">Tone</div>
                  <div className="text-white font-medium">{tones.find(t => t.id === content.metadata.tone)?.name}</div>
                </div>
                <div className="p-4 bg-white/5 rounded-lg">
                  <div className="text-white/60 text-sm">Generated</div>
                  <div className="text-white font-medium">{new Date(content.metadata.generatedAt).toLocaleString()}</div>
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </div>
    </section>
  );
};

export default ContentGenerator;